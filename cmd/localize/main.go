package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/romshark/localize/gettext"
	"github.com/romshark/localize/internal/codeparser"
	"github.com/romshark/localize/internal/gengo"
	"golang.org/x/text/language"
	"mvdan.cc/gofumpt/format"
)

func main() {
	if err := run(os.Args); err != nil {
		fmt.Println("ERR:", err)
		os.Exit(1)
	}
}

var (
	ErrSourceErrors    = errors.New("source code contains errors")
	ErrNoCommand       = errors.New("no command")
	ErrUnknownCommand  = errors.New("unknown command")
	ErrAnalyzingSource = errors.New("analyzing sources")
)

func run(osArgs []string) error {
	if len(osArgs) < 2 {
		return fmt.Errorf("%w, use either of: [generate,lint]", ErrNoCommand)
	}
	switch osArgs[1] {
	case "lint":
		// TODO: implement lint command
		panic("not yet implemented")
	case "generate":
		return runGenerate(osArgs)
	}
	return fmt.Errorf("%w %q, use either of: [generate,lint]",
		ErrUnknownCommand, osArgs[1])
}

func runGenerate(osArgs []string) error {
	start := time.Now()
	conf, err := parseCLIArgsGenerate(osArgs)
	if err != nil {
		return fmt.Errorf("parsing arguments: %w", err)
	}

	poEncoder := gettext.Encoder{}

	collection, bundle, stats, srcErrs, err := codeparser.Parse(
		conf.SrcPathPattern, conf.BundlePkgPath, conf.Locale,
		conf.TrimPath, conf.QuietMode, conf.VerboseMode,
	)
	if err != nil {
		return fmt.Errorf("%w: %w", ErrAnalyzingSource, err)
	}

	_ = bundle // TODO

	if len(srcErrs) > 0 {
		// Print source errors to console.
		fmt.Fprintf(os.Stderr, "SOURCE ERRORS (%d):\n", len(srcErrs))
		for _, e := range srcErrs {
			fmt.Fprintf(os.Stderr, " %s:%d:%d: %s\n", e.Filename, e.Line, e.Column, e.Err.Error())
		}
		return ErrSourceErrors
	}

	if err := os.MkdirAll(conf.BundlePkgPath, 0o755); err != nil {
		return fmt.Errorf("creating bundle package directory: %w", err)
	}

	{ // Create the head.txt file if it doesn't exist yet.
		headFilePath := filepath.Join(conf.BundlePkgPath, "head.txt")
		if _, err := os.Stat(headFilePath); errors.Is(err, os.ErrNotExist) {
			if !conf.QuietMode {
				fmt.Fprintln(os.Stderr, "head.txt not found, creating a new one")
			}
			f, err := os.Create(headFilePath)
			if err != nil {
				return fmt.Errorf("creating head.txt file: %w", err)
			}
			if err := f.Close(); err != nil {
				fmt.Fprintf(os.Stderr, "closing head.txt file: %v", err)
			}
		}
	}

	{ // Write the native source catalog `.po` file.
		fileName := filepath.Join(
			conf.BundlePkgPath,
			"native."+conf.Locale.String()+".po",
		)
		f, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0o644)
		if err != nil {
			return fmt.Errorf("opening output file: %v", err)
		}
		po := collection.MakePO()
		// Add do not edit head comment.
		po.Head.HeadComments.Text = append(po.Head.HeadComments.Text,
			gettext.Comment{Value: "generated by " +
				"github.com/romshark/localize/cmd/localize. DO NOT EDIT."},
			gettext.Comment{Value: ""},
			gettext.Comment{Value: "Any changes made to this file will be overwritten"},
			gettext.Comment{Value: "as soon as localize is executed again."})
		if err := poEncoder.EncodePO(po, f); err != nil {
			return fmt.Errorf("encoding PO file: %w", err)
		}
	}

	{ // Write translation template file.
		f, err := os.OpenFile(
			conf.OutPathCatalogTemplate, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0o644,
		)
		if err != nil {
			return fmt.Errorf("opening file: %v", err)
		}
		po := collection.MakePO()
		pot := po.MakePOT()
		// Add do not edit head comment.
		pot.Head.HeadComments.Text = append(pot.Head.HeadComments.Text,
			gettext.Comment{Value: "generated by " +
				"github.com/romshark/localize/cmd/localize. DO NOT EDIT."},
			gettext.Comment{Value: ""},
			gettext.Comment{Value: "Any changes made to this file will be overwritten"},
			gettext.Comment{Value: "as soon as localize is executed again."})
		if err := poEncoder.EncodePOT(pot, f); err != nil {
			return fmt.Errorf("encoding POT file: %w", err)
		}
	}

	{ // Generate Go code
		f, err := os.OpenFile(
			goBundleFileName(conf.BundlePkgPath),
			os.O_CREATE|os.O_TRUNC|os.O_WRONLY,
			0o644,
		)
		if err != nil {
			return fmt.Errorf("opening Go bundle output file: %w", err)
		}
		var buf bytes.Buffer

		pkgName := filepath.Base(conf.BundlePkgPath)
		err = gengo.Write(&buf, conf.Locale, collection.Header, pkgName, collection)
		if err != nil {
			return fmt.Errorf("generating Go bundle: %w", err)
		}

		// Format and write to file.
		formatted, err := format.Source(buf.Bytes(), format.Options{})
		if err != nil {
			return fmt.Errorf("formatting generated Go bundle code: %w", err)
		}

		if _, err := f.Write(formatted); err != nil {
			return fmt.Errorf("writing formatted Go bundle code to file: %w", err)
		}
	}

	timeTotal := time.Since(start)
	if !conf.QuietMode {
		w := os.Stderr
		_, _ = fmt.Fprintf(w, "Text/Block: %d/%d\n",
			stats.TextTotal.Load(), stats.BlockTotal.Load())
		_, _ = fmt.Fprintf(w, "Plural/PluralBlock: %d/%d\n",
			stats.PluralTotal.Load(), stats.PluralBlockTotal.Load())
		_, _ = fmt.Fprintf(w, "Calls merged: %d\n", stats.Merges.Load())
		_, _ = fmt.Fprintf(w, "files scanned: %d\n", stats.FilesTraversed.Load())
		_, _ = fmt.Fprintf(w, "time total: %s\n", timeTotal.String())
	}

	return nil
}

func catalogTemplateFileName(outPath string) string {
	return filepath.Join(outPath, "catalog.pot")
}

type ConfigGenerate struct {
	Locale                 language.Tag
	SrcPathPattern         string
	OutPathCatalogTemplate string
	TrimPath               bool
	QuietMode              bool
	VerboseMode            bool
	BundlePkgPath          string
}

// parseCLIArgsGenerate parses CLI arguments for command "generate"
func parseCLIArgsGenerate(osArgs []string) (*ConfigGenerate, error) {
	c := &ConfigGenerate{}

	var locale string

	cli := flag.NewFlagSet(osArgs[0], flag.ExitOnError)
	cli.StringVar(&locale, "l", "",
		"default locale of the original source code texts in BCP 47")
	cli.StringVar(&c.SrcPathPattern, "p", ".", "path to Go module")
	cli.StringVar(&c.OutPathCatalogTemplate, "tmpl", "",
		"catalog template output file path. Set to bundle package by default.")
	cli.BoolVar(&c.TrimPath, "trimpath", true, "enable source code path trimming")
	cli.BoolVar(&c.QuietMode, "q", false, "disable all console logging")
	cli.BoolVar(&c.VerboseMode, "v", false, "enables verbose console logging")
	cli.StringVar(&c.BundlePkgPath, "b", "localizebundle",
		"path to generated Go bundle package relative to module path (-p)")

	if err := cli.Parse(osArgs[2:]); err != nil {
		return nil, fmt.Errorf("parsing: %w", err)
	}

	if c.OutPathCatalogTemplate == "" {
		c.OutPathCatalogTemplate = catalogTemplateFileName(
			c.BundlePkgPath,
		)
	}

	if locale == "" {
		return nil, fmt.Errorf(
			"please provide a valid BCP 47 locale for " +
				"the default language of your original code base " +
				"using the 'l' parameter",
		)
	}
	var err error
	c.Locale, err = language.Parse(locale)
	if err != nil {
		return nil, fmt.Errorf(
			"argument 'l' (%q) must be a valid BCP 47 locale: %w", locale, err,
		)
	}

	return c, nil
}

func goBundleFileName(pkgPath string) string {
	return filepath.Join(pkgPath, filepath.Base(pkgPath)+"_gen.go")
}
