// Code generated by github.com/romshark/localize/cmd/localize. DO NOT EDIT.
// generator version: {{ .GeneratorVersion }}
{{ if .CopyrightNotice }}
// {{ .CopyrightNotice }}
{{ end }}

//      __                        __ _                      ___
//     / /   ____   _____ ____ _ / /(_)____  ___     _   __<  /
//    / /   / __ \ / ___// __ `// // //_  / / _ \   | | / // /
//   / /___/ /_/ // /__ / /_/ // // /  / /_/  __/   | |/ // /
//  /_____/\____/ \___/ \__,_//_//_/  /___/\___/    |___//_/

// Package localizebundle provides generated localization readers for:
// - en
package {{ .Package }}

import (
	"fmt"

	"github.com/romshark/localize"	
	"golang.org/x/text/language"
	"github.com/go-playground/locales"
	{{ range .Catalogs }}
	locales{{ .Locale }} "github.com/go-playground/locales/{{ .LocalesSubpackage }}"
	{{ end }}
)

const (
	minInt53 = -1 << 53
	maxInt53 = 1 << 53
)

{{ range .Catalogs }}
var {{ .TypeNameUnexported }}Locales = locales{{ .Locale }}.New()
var {{ .TypeNameUnexported }}Tag language.Tag
var {{ .TypeNameUnexported }}Base language.Base
{{ end }}

func init() {
	{{ range .Catalogs }}
	{{ .TypeNameUnexported }}Tag = language.MustParse({{ printf "%q" .LocaleTag.String }})
	{{ .TypeNameUnexported }}Base, _ = {{ .TypeNameUnexported }}Tag.Base()
	{{ end }}
}

{{ range .Catalogs }}

{{ if not .Native }}
var {{ .TypeNameUnexported }}Static = map[string]string {
	{{ range .MessagesStatic }}
	{{ printf "%q" .Other }}: {{ printf "%q" .Other }},
	{{ end }}
}
var {{ .TypeNameUnexported }}Plural = map[string]localize.Forms {
	{{ range .MessagesPlural }}
	{{ printf "%q" .Other }}: {
		{{- if .Zero -}}
		Zero: {{ printf "%q" .Zero }},
		{{ end -}}
		{{- if .One -}}
		One: {{ printf "%q" .One }},
		{{ end -}}
		{{- if .Two -}}
		Two: {{ printf "%q" .Two }},
		{{ end -}}
		{{- if .Few -}}
		Few: {{ printf "%q" .Few }},
		{{ end -}}
		{{- if .Many -}}
		Many: {{ printf "%q" .Many }},
		{{ end -}}
		Other: {{ printf "%q" .Other }},
	},
	{{ end }}
}
{{ else }}
var {{ .TypeNameUnexported }}Plural = map[string]localize.Forms {
	{{ range .MessagesPlural }}
	{{ printf "%q" .Other }}: {
		{{- if .Zero -}}
		Zero: {{ printf "%q" .Zero }},
		{{ end -}}
		{{- if .One -}}
		One: {{ printf "%q" .One }},
		{{ end -}}
		{{- if .Two -}}
		Two: {{ printf "%q" .Two }},
		{{ end -}}
		{{- if .Few -}}
		Few: {{ printf "%q" .Few }},
		{{ end -}}
		{{- if .Many -}}
		Many: {{ printf "%q" .Many }},
		{{ end -}}
		Other: {{ printf "%q" .Other }},
	},
	{{ end }}
}
{{ end }}


// {{ .TypeName }} is a localized reader implementation for locale "{{ printf "%q" .LocaleTag.String }}".
type {{ .TypeName }} struct{}

var _ localize.Reader = new({{ .TypeName }})

// Locale provides the locale this reader localizes for.
// Always returns the locale "{{ printf "%q" .LocaleTag.String }}".
func (r {{ .TypeName }}) Locale() language.Tag { return {{ .TypeNameUnexported }}Tag }

// Base provides the base language this reader localizes for.
// Always returns the base language of locale "{{ printf "%q" .LocaleTag.String }}".
func (r {{ .TypeName }}) Base() language.Base { return {{ .TypeNameUnexported }}Base }

// Text provides static 1-to-1 translations.
func (r {{ .TypeName }}) Text(text string) (localized string) {
	{{ if .Native }}
	// This reader reads the original source code's native locale.
	// No translation necessary.
	return text
	{{ else }}
	return {{ .TypeNameUnexported }}Static[text]
	{{ end }}
}

// Block provides static 1-to-1 translations for a multi-line string block.
// Common leading indentation is automatically removed.
// For more information, see github.com/romshark/localize.Reader documentation.
func (r {{ .TypeName }}) Block(text string) string {
	{{ if .Native }}
	// This reader reads the original source code's native locale.
	// No translation necessary.
	return text
	{{ else }}
	return {{ .TypeNameUnexported }}Static[text]
	{{ end }}
}

// Plural provides plural translations in cardinal form.
// For more information, see github.com/romshark/localize.Reader documentation.
func (r {{ .TypeName }}) Plural(
	templates localize.Forms, quantity any,
) (localized string) {
	var q float64
	switch n := quantity.(type) {
	case uint:
		if n >= maxInt53 {
			// Lossy conversion.
			return fmt.Sprintf(templates.Other, n)
		}
		q = float64(n)
	case uint8:
		q = float64(n)
	case uint16:
		q = float64(n)
	case uint32:
		q = float64(n)
	case uint64:
		if n >= maxInt53 {
			// Lossy conversion.
			return fmt.Sprintf(templates.Other, n)
		}
		q = float64(n)
	case int:
		if n >= maxInt53 || n <= minInt53 {
			// Lossy conversion.
			return fmt.Sprintf(templates.Other, n)
		}
		q = float64(n)
	case int8:
		q = float64(n)
	case int16:
		q = float64(n)
	case int32:
		q = float64(n)
	case int64:
		if n >= maxInt53 || n <= minInt53 {
			// Lossy conversion.
			return fmt.Sprintf(templates.Other, n)
		}
		q = float64(n)
	case float32:
		q = float64(n)
	case float64:
		q = float64(n)
	default:
		// Incorrect input type, fallback to default form.
		return fmt.Sprintf(templates.Other, quantity)
	}

	{{ if .Native }}
	// This reader reads the original source code's native locale.
	// No translation necessary.
	forms := {{ .TypeNameUnexported }}Plural[templates.Other]
	{{ else }}
	forms := {{ .TypeNameUnexported }}Plural[templates.Other]
	{{ end }}
	tmpl := forms.Other
	switch {{ .TypeNameUnexported }}Locales.CardinalPluralRule(q, 0) {
	case locales.PluralRuleZero:
		tmpl = forms.Zero
	case locales.PluralRuleOne:
		return forms.One
	case locales.PluralRuleTwo:
		return forms.Two
	case locales.PluralRuleFew:
		return forms.Few
	case locales.PluralRuleMany:
		return forms.Many
	}
	return fmt.Sprintf(tmpl, quantity)
}

// PluralBlock behaves like Plural and formats like Block.
// For more information, see github.com/romshark/localize.Reader documentation.
func (r {{ .TypeName }}) PluralBlock(
	templates localize.Forms, quantity any,
) (localized string) {	
	return r.Plural(templates, quantity)
}

// Translator returns the localized translator of github.com/go-playground/locales/{{ .LocalesSubpackage }}
func (r {{ .TypeName }}) Translator() locales.Translator {
	return {{ .TypeNameUnexported }}Locales
}

{{ end }}